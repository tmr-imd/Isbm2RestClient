/*
 * ISBM 2.0
 *
 * An OpenAPI specification for the ISBM 2.0 RESTful interface.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: info@mimosa.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Isbm2RestClient.Api;
using Isbm2RestClient.Model;
using Isbm2RestClient.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Isbm2RestClient.Test.Model
{
    /// <summary>
    ///  Class for testing MessageContentContent
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class MessageContentContentTests : IDisposable
    {
        //private MessageContentContent instance;

        public MessageContentContentTests()
        {
            // TODO uncomment below to create an instance of MessageContentContent
            //instance = new MessageContentContent();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MessageContentContent
        /// </summary>
        [Fact]
        public void MessageContentContentInstanceTest()
        {
            // TODO uncomment below to test "IsType" MessageContentContent
            //Assert.IsType<MessageContentContent>(instance);
        }

        [Fact]
        public void JsonDocumentIsSerialisedCorrectly()
        {
            var testObject = new
            {
                Name = "Test",
                Description = "Yo!",
                Items = new[]
                {
                    new { subName = "Fred"}
                }
            };

            var document = System.Text.Json.JsonSerializer.SerializeToDocument( testObject );

            var messageContent = new MessageContentContent( document );
            var json = messageContent.ToJson();

            Assert.DoesNotContain( @"\""", json );
        }

        [Fact]
        public void JsonDocumentIsDeserialisedCorrectly()
        {
            var testObject = new
            {
                Name = "Test",
                Description = "Yo!",
                Items = new[]
                {
                    new { subName = "Fred"}
                }
            };

            var jsonString = System.Text.Json.JsonSerializer.Serialize(testObject);

            var messageContent = MessageContentContent.FromJson( jsonString );

            var document = messageContent.GetJsonDocument();

            Assert.True( document.RootElement.GetProperty("Name").GetString() == "Test" );
        }
    }
}
