/*
 * ISBM 2.0
 *
 * An OpenAPI specification for the ISBM 2.0 RESTful interface.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: info@mimosa.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Isbm2RestClient.Client.OpenAPIDateConverter;
using System.Reflection;
using System.Text.Json;

namespace Isbm2RestClient.Model
{
    /// <summary>
    /// MessageContentContent
    /// </summary>
    [JsonConverter(typeof(MessageContentContentJsonConverter))]
    [DataContract(Name = "MessageContent_content")]
    public partial class MessageContentContent : AbstractOpenAPISchema, IEquatable<MessageContentContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageContentContent" /> class
        /// with the <see cref="string" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of string.</param>
        public MessageContentContent(string actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageContentContent" /> class
        /// with the <see cref="JsonDocument" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Dictionary&lt;string, Object&gt;.</param>
        public MessageContentContent(JsonDocument actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(JsonDocument))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(string))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: Dictionary<string, Object>, string");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `string`. If the actual instance is not `string`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of string</returns>
        public string GetString()
        {
            return (string)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `JsonDocument`. If the actual instance is not `JsonDocument`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of JsonDocument</returns>
        public JsonDocument GetJsonDocument()
        {
            return (JsonDocument)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageContentContent {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            if ( this.ActualInstance is JsonDocument )
                return System.Text.Json.JsonSerializer.Serialize( this.ActualInstance );

            return JsonConvert.SerializeObject(this.ActualInstance, MessageContentContent.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of MessageContentContent
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of MessageContentContent</returns>
        public static MessageContentContent FromJson(string jsonString)
        {
            MessageContentContent newMessageContentContent = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newMessageContentContent;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(object).GetProperty("AdditionalProperties") == null)
                {
                    var document = System.Text.Json.JsonDocument.Parse(jsonString);
                    newMessageContentContent = new MessageContentContent(document);
                    
                    //var document = System.Text.Json.JsonSerializer.Deserialize<object>( jsonString );
                    //newMessageContentContent = new MessageContentContent( System.Text.Json.JsonSerializer.SerializeToDocument(document) );
                }
                else
                {
                    var document = System.Text.Json.JsonDocument.Parse(jsonString);
                    newMessageContentContent = new MessageContentContent(document);
                }
                matchedTypes.Add("JsonDocument");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into JsonDocument: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(string).GetProperty("AdditionalProperties") == null)
                {
                    newMessageContentContent = new MessageContentContent(JsonConvert.DeserializeObject<string>(jsonString, MessageContentContent.SerializerSettings));
                }
                else
                {
                    newMessageContentContent = new MessageContentContent(JsonConvert.DeserializeObject<string>(jsonString, MessageContentContent.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("string");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into string: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newMessageContentContent;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageContentContent);
        }

        /// <summary>
        /// Returns true if MessageContentContent instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageContentContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageContentContent input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for MessageContentContent
    /// </summary>
    public class MessageContentContentJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(MessageContentContent).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            if (!MoveToContent(reader)) return null;
            return ReadStringOrObject(reader, objectType, existingValue, serializer);
        }

        private object ReadStringOrObject(JsonReader reader, Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
            // XXX: Generated code expected a JObject but it could be a string.
            // Also, want to raise the appropriate exception, rather than a generic reader error,
            // if the value's type does not match the schema.
            switch(reader.TokenType) 
            {
                case JsonToken.Null:
                    return null;

                case JsonToken.String:
                    return new MessageContentContent( (string)reader.Value );

                case JsonToken.StartObject:
                    return MessageContentContent.FromJson(JObject.Load(reader).ToString(Formatting.None));

                default:
                    var jsonString = reader.Value.ToString();
                    System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into string or JsonDocument", jsonString));
                    throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
        }

        private bool MoveToContent(JsonReader reader) {
            var tokenType = reader.TokenType;
            while ((tokenType == JsonToken.None || tokenType == JsonToken.Comment)) {
                if (!reader.Read()) return false;
                tokenType = reader.TokenType;
            }
            return true;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return objectType == typeof(MessageContentContent);
        }
    }

}
