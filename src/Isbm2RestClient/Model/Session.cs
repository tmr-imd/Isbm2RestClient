/*
 * ISBM 2.0
 *
 * An OpenAPI specification for the ISBM 2.0 RESTful interface.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: info@mimosa.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Isbm2RestClient.Client.OpenAPIDateConverter;

namespace Isbm2RestClient.Model
{
    /// <summary>
    /// &#x60;sessionType&#x60; is implicit based on the context. &#x60;topics&#x60; must contain atleast 1 item when opening a PublicationConsumer or RequestProvider session.
    /// </summary>
    [DataContract(Name = "Session")]
    public partial class Session : IEquatable<Session>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SessionType
        /// </summary>
        [DataMember(Name = "sessionType", EmitDefaultValue = false)]
        public SessionType? SessionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Session" /> class.
        /// </summary>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="sessionType">sessionType.</param>
        /// <param name="listenerUrl">listenerUrl.</param>
        /// <param name="topics">topics.</param>
        /// <param name="filterExpressions">filterExpressions.</param>
        public Session(string sessionId = default(string), SessionType? sessionType = default(SessionType?), string? listenerUrl = default(string), List<string> topics = default(List<string>), List<FilterExpression> filterExpressions = default(List<FilterExpression>))
        {
            this.SessionId = sessionId;
            this.SessionType = sessionType;
            this.ListenerUrl = listenerUrl;
            this.Topics = topics;
            this.FilterExpressions = filterExpressions;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name = "sessionId", EmitDefaultValue = false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets ListenerUrl
        /// </summary>
        [DataMember(Name = "listenerUrl", EmitDefaultValue = false)]
        public string? ListenerUrl { get; set; }

        /// <summary>
        /// Gets or Sets Topics
        /// </summary>
        [DataMember(Name = "topics", EmitDefaultValue = false)]
        public List<string> Topics { get; set; }

        /// <summary>
        /// Gets or Sets FilterExpressions
        /// </summary>
        [DataMember(Name = "filterExpressions", EmitDefaultValue = false)]
        public List<FilterExpression> FilterExpressions { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Session {\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  SessionType: ").Append(SessionType).Append("\n");
            sb.Append("  ListenerUrl: ").Append(ListenerUrl).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("  FilterExpressions: ").Append(FilterExpressions).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Session);
        }

        /// <summary>
        /// Returns true if Session instances are equal
        /// </summary>
        /// <param name="input">Instance of Session to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Session input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.SessionType == input.SessionType ||
                    this.SessionType.Equals(input.SessionType)
                ) && 
                (
                    this.ListenerUrl == input.ListenerUrl ||
                    (this.ListenerUrl != null &&
                    this.ListenerUrl.Equals(input.ListenerUrl))
                ) && 
                (
                    this.Topics == input.Topics ||
                    this.Topics != null &&
                    input.Topics != null &&
                    this.Topics.SequenceEqual(input.Topics)
                ) && 
                (
                    this.FilterExpressions == input.FilterExpressions ||
                    this.FilterExpressions != null &&
                    input.FilterExpressions != null &&
                    this.FilterExpressions.SequenceEqual(input.FilterExpressions)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SessionId != null)
                {
                    hashCode = (hashCode * 59) + this.SessionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SessionType.GetHashCode();
                if (this.ListenerUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ListenerUrl.GetHashCode();
                }
                if (this.Topics != null)
                {
                    hashCode = (hashCode * 59) + this.Topics.GetHashCode();
                }
                if (this.FilterExpressions != null)
                {
                    hashCode = (hashCode * 59) + this.FilterExpressions.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
